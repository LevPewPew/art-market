<p id="notice"><%= notice %></p>

<section class="listing-container">
  <div class="info">
    <div class="title">
      <h2><%= @listing.title %></h2>
    </div>
    <div class="section-1">
      <div class="section-2">
        <div class="section-4">
          <em>by <%= @listing.artist %></em>
          <div class="styles">
            <% @listing.listings_styles.each do |listing_style| %>
              <% if listing_style.style.name.downcase != 'none' %>
                <div class="style">
                  # <%= listing_style.style.name.gsub(' ', '-') %>
                </div> 
              <% end %>
            <% end %>
          </div>
          <div class="description">
            <%= @listing.description %>
          </div>
        </div>
        <div class="purchase">
          <% if current_user.nil? %>
            <%= link_to "Sign In to Purchase!", new_user_session_path, class: "generic-button" %>
          <% else %>
            <% if !@listing.purchase && @listing.user.id != current_user.id %>
              <button data-stripe="payment">Purchase</button>

              <%# this script is needed for stripe to work, i don't know exactly how it works, got it from the docs %>
              <script src="https://js.stripe.com/v3/"></script>
              <script>
                document
                  .querySelector("[data-stripe='payment']")
                  .addEventListener("click", () => {
                    const stripe = Stripe(
                      "<%= Rails.application.credentials.dig(:stripe, :public_key) %>"
                    );

                    stripe.redirectToCheckout({
                      sessionId: "<%= @session_id %>"
                    });
                  });
              </script>
            <% end %>
          <% end %>
        </div>
        <% if !current_user.nil? && (current_user.id == @listing.user_id || current_user.user_detail.super_user) %>
          <div class="crud">
            <%= link_to 'Edit', edit_listing_path(@listing) %>
            <%= link_to 'Delete', @listing, method: :delete, data: { confirm: 'Are you sure?' } %>
          </div>
        <% end %>
      </div>
      <div class="section-3">
        $<%= number_with_delimiter(@listing.price, delimiter: ',') %>
        <div class="user">
          Owner: <%= @listing.user.user_detail.name %>
        </div>
        <div class="listed-on">
          Listed on: <%= @listing.created_at.to_s.slice(0...-4) %>
        </div>
      </div>
    </div>
  </div>
  <div class="image">
    <% if @listing.picture.attached? %>
      <%= image_tag @listing.picture %>
    <% else %>
      <%= image_tag 'missing-image' %>
    <% end %>
  </div>
</section>

<section class="comments-container">
  <h3>Discussion</h3>
  <%# need to ensure order by id otherwise when a comms_mngr edits, rails sends the edited to end of the array, but we want to preserve by original post order %>
  <% @listing.comments.order('id').each do |comment| %>
    <div class="comment-container">
      <div class="user-name">
        <%= comment.user.user_detail.name %>
      </div>
      <div class="body">
        <%= comment.body %>
      </div>
      <% if !current_user.nil? && (current_user.id == comment.user_id || current_user.user_detail.super_user || current_user.user_detail.comms_mngr) %>
        <%# need to specify explicitly what params get what values when doing a nested form like this %>
        <div class="crud">
          <%= link_to 'Edit', edit_listing_comment_path(listing_id: @listing.id, id: comment.id) %>
          <%= link_to 'Delete', [comment.listing, comment], method: :delete, data: { confirm: 'Are you sure?' } %>
        </div>
      <% end %>
    </div>
  <% end %>
  <h4>Discuss this Piece</h4>
  <% if current_user.nil? %>
    <%= link_to "Sign In to Comment!", new_user_session_path, class: "generic-button" %>
  <% else %>
    <%= render 'comments/form' %>
  <% end %>
</section>

<section class="location-container">
  <% provide :head_tags do %>
    <meta name='turbolinks-visit-control' content='reload'>
    <script>
    document.addEventListener("DOMContentLoaded", function(){
      initMap(<%= @coords[0] %>, <%= @coords[1] %>)
    });
    </script>
  <% end %>

  <h3>Location</h3>

  <div id="map"></div>
  <script>
    function initMap(lat, lng) {
      var myCoords = new google.maps.LatLng(lat, lng);
      var mapOptions = {
        center: myCoords,
        zoom: 16
      };
      var map = new google.maps.Map(document.getElementById('map'), mapOptions);
      var icon = {
        // using a non local image as google maps need to download it, later should change to an image i am personally hosting
        url: "https://i.imgur.com/PRW5W49.png",
        scaledSize: new google.maps.Size(200, 200),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(100, 100)
      }
      var marker = new google.maps.Marker({
        position: myCoords,
        map: map,
        icon: icon
      });

      //when the map zoom changes, resize the icon based on the zoom level so the marker covers the same geographic area
      google.maps.event.addListener(map, 'zoom_changed', function() {
        var pixelSizeAtZoom0 = 0.003051758; //the size of the icon at zoom level 0
        var maxPixelSize = 1600; //restricts the maximum size of the icon, otherwise the browser will choke at higher zoom levels trying to scale an image to millions of pixels

        var zoom = map.getZoom();
        var relativePixelSize = Math.round(pixelSizeAtZoom0 * Math.pow(2, zoom)); // use 2 to the power of current zoom to calculate relative pixel size.  Base of exponent is 2 because relative size should double every time you zoom in

        if(relativePixelSize > maxPixelSize) //restrict the maximum size of the icon
          relativePixelSize = maxPixelSize;

        //change the size of the icon
        marker.setIcon(
          {
            url: marker.getIcon().url, //marker's same icon graphic
            scaledSize: new google.maps.Size(relativePixelSize, relativePixelSize), //changes the scale
            // scaledSize: new google.maps.Size(relativePixelSize, relativePixelSize), //changes the scale
            origin: null,
            anchor: null
          }
        );
      });
    }
  </script>

  <p>Exact location information is provided after art work is purchased.</p>
</section>

<%= link_to 'Return to Listings', listings_path, class: "return-link" %>
