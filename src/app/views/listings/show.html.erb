<%# for google maps API %>
<% provide :head_tags do %>
  <meta name='turbolinks-visit-control' content='reload'>
  <script>
  document.addEventListener("DOMContentLoaded", function(){
    initMap(<%= @coords[0] %>, <%= @coords[1] %>)
  });
  </script>
<% end %>

<p id="notice"><%= notice %></p>

<p>
  <strong>Title:</strong>
  <%= @listing.title %>
</p>

<p>
  <strong>Artist:</strong>
  <%= @listing.artist %>
</p>

<p>
  <strong>User:</strong>
  <%= @listing.user.user_detail.name %>
</p>

<p>
  <strong>Price:</strong>
  <%= @listing.price %>
</p>

<p>
  <strong>Style/s:</strong>
  <% @listing.listings_styles.each do |listing_style| %>
    <%= listing_style.style.name + '.' unless listing_style.style.name.downcase == 'none' %>
  <% end %>
</p>

<p>
  <strong>Description:</strong>
  <%= @listing.description %>
</p>

<p>
  <strong>Image:</strong>
  <br>
  <% if @listing.picture.attached? %>
    <%= image_tag @listing.picture, width: "300px" %>
  <% else %>
    <%= image_tag 'missing-image', width: "300px"%>
  <% end %>
</p>

<% if !current_user.nil? && (current_user.id == @listing.user_id || current_user.user_detail.super_user) %>
  <td><%= link_to 'Edit', edit_listing_path(@listing) %></td>
  <td><%= link_to 'Destroy', @listing, method: :delete, data: { confirm: 'Are you sure?' } %></td>
<% end %>

<hr>

<p>
  <strong>Discussion:</strong>
  <br>
  <%# need to ensure order by id otherwise when a comms_mngr edits, rails sends the edited to end of the array, but we want to preserve by original post order %>
  <% @listing.comments.order('id').each do |comment| %>
    <div>
      <div>
        <em><%= comment.user.user_detail.name %></em>
        <em><%= comment.created_at %></em>
      </div>
      <%= comment.body %>
        <% if !current_user.nil? && (current_user.id == comment.user_id || current_user.user_detail.super_user || current_user.user_detail.comms_mngr) %>
          <%# need to specify explicitly what params get what values when doing a nested form like this %>
          <%= link_to 'Edit', edit_listing_comment_path(listing_id: @listing.id, id: comment.id) %>
          <%= link_to 'Destroy', [comment.listing, comment], method: :delete, data: { confirm: 'Are you sure?' } %>
        <% end %>
    </div>
  <% end %>
</p>

<strong>Discuss this Piece</strong>
<% if current_user.nil? %>
  <br>
  <%= link_to "Sign In to Comment!", new_user_session_path %>
<% else %>
  <%= render 'comments/form' %>
<% end %>

<hr>

<% if current_user.nil? %>
  <%= link_to "Sign In to Purchase!", new_user_session_path %>
<% else %>
  <% if !@listing.purchase && @listing.user.id != current_user.id %>
    <button data-stripe="payment">Purchase</button>

    <%# this script is needed for stripe to work, i don't know exactly how it works, got it from the docs %>
    <script src="https://js.stripe.com/v3/"></script>
    <script>
      document
        .querySelector("[data-stripe='payment']")
        .addEventListener("click", () => {
          const stripe = Stripe(
            "<%= Rails.application.credentials.dig(:stripe, :public_key) %>"
          );

          stripe.redirectToCheckout({
            sessionId: "<%= @session_id %>"
          });
        });
    </script>
  <% end %>
<% end %>

<br>
<br>

<div id="map"></div>
<script>
  function initMap(lat, lng) {
    var myCoords = new google.maps.LatLng(lat, lng);
    var mapOptions = {
      center: myCoords,
      zoom: 16
    };
    var map = new google.maps.Map(document.getElementById('map'), mapOptions);
    var icon = {
      // using a non local image as google maps need to download it, later should change to an image i am personally hosting
      url: "http://pluspng.com/img-png/circle-png-circle-icon-1600.png",
      scaledSize: new google.maps.Size(200, 200),
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(100, 100)
    }
    var marker = new google.maps.Marker({
      position: myCoords,
      map: map,
      icon: icon
    });

    //when the map zoom changes, resize the icon based on the zoom level so the marker covers the same geographic area
    google.maps.event.addListener(map, 'zoom_changed', function() {
      var pixelSizeAtZoom0 = 0.003051758; //the size of the icon at zoom level 0
      var maxPixelSize = 400; //restricts the maximum size of the icon, otherwise the browser will choke at higher zoom levels trying to scale an image to millions of pixels

      var zoom = map.getZoom();
      var relativePixelSize = Math.round(pixelSizeAtZoom0 * Math.pow(2, zoom)); // use 2 to the power of current zoom to calculate relative pixel size.  Base of exponent is 2 because relative size should double every time you zoom in

      if(relativePixelSize > maxPixelSize) //restrict the maximum size of the icon
        relativePixelSize = maxPixelSize;

      //change the size of the icon
      marker.setIcon(
        {
          url: marker.getIcon().url, //marker's same icon graphic
          scaledSize: new google.maps.Size(relativePixelSize, relativePixelSize), //changes the scale
          // scaledSize: new google.maps.Size(relativePixelSize, relativePixelSize), //changes the scale
          origin: null,
          anchor: null
        }
      );
    });
  }
</script>

<%= link_to 'Return to Listings', listings_path %>
